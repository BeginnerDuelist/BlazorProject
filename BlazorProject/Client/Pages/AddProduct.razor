﻿
@page "/addProduct"


@using BlazorProject.Shared;

@inject IProductService productService
@inject ICategoryService categoryService
<div class="row">
    <div class="col-md-6 offset-3">
        <h3>Add Product</h3>

        <EditForm Model="@newProduct" OnValidSubmit="HandleAddProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary class="form-control p-3"></ValidationSummary>
            <div class="form-group mt-2">
                <div class="alert alert-@CssClass">@Message</div>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="title">Name</label>
                <InputText id="title" @bind-Value="newProduct.Title" class="form-control"></InputText>
                <ValidationMessage For="@(()=> newProduct.Title)"></ValidationMessage>
            </div>
               <div class="form-group mt-2">
                    <label class="form-label" for="price">Original Price</label>
                    <input type="text" id="price" min="0.5" @bind="newProduct.Price" class="form-control"></input>
                    <ValidationMessage For="@(()=> newProduct.Price)"></ValidationMessage>
               </div>
               <div class="form-group mt-2">
                    <label class="form-label" for="newprice">New Price</label>
                    <input type="text" id="newprice" min="0.5" @bind="newProduct.NewPrice" class="form-control"></input>
                    <ValidationMessage For="@(()=> newProduct.NewPrice)"></ValidationMessage>
               </div>

            <div class="form-group mt-2">
                <label class="form-label" for="description">Description</label>
                <InputTextArea id="description" @bind-Value="newProduct.Description" class="form-control"></InputTextArea>
                <ValidationMessage For="@(()=> newProduct.Description)"></ValidationMessage>
            </div>
            <div class="form-group mt-2">
                <label class="form-label" for="description">Quantity</label>
                <input type="number" id="quantity" min="1" @bind="newProduct.Quantity"  class="form-control"></input>
                <ValidationMessage For="@(()=> newProduct.Quantity)"></ValidationMessage>
            </div>
               <div class="form-group mt-2">
                    <label class="form-label" for="categoryId">Category</label>
                    <select id="categoryId" @bind="newProduct.CategoryId" class="form-control">
                         <option value="">Select a category</option>
                         @foreach (var category in categories)
                         {
                              <option value="@category.Id">@category.Name</option>
                         }
                    </select>
                    <ValidationMessage For="@(()=> newProduct.CategoryId)"></ValidationMessage>
               </div>
            <div class="form-group mt-2">
                <label class="form-label" for="image">Image</label>&nbsp; <span class="text-danger fw-bold">@uploadMessage</span>
                <InputFile id="image" OnChange="OnFileChange" class="form-control"></InputFile>
                <ValidationMessage For="@(()=> newProduct.ImageUrl)"></ValidationMessage>
            </div>
            <div class="form-check mt-2">
                <button type="submit" class="btn btn-primary"> <i class="oi oi-plus"></i> Create</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
     public Product newProduct = new Product();
     private List<Category> categories = new List<Category>();
     private string? uploadMessage;
     private string? Message = string.Empty;
     private string? CssClass = string.Empty;
     // Restul codului din componenta dvs.
     protected override async Task OnInitializedAsync()
     {
          categories = (await categoryService.GetCategories()).MultipleData;
     }
    async Task HandleAddProduct()
    {
        Message = "";
        var response = await productService.AddProduct(newProduct);
            Message = response!.Message;
            CssClass = response!.CssClass; 
    }


    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if(fileInfo.Extension.ToLower().Contains(".jpg"))
        {
            uploadMessage = "";
            var format = "image/jpg";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            newProduct.ImageUrl = imageData;

        }
        else { uploadMessage = "Invalid file selected (only JPG file)"; }
    }
}